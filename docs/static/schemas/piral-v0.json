{
  "$id": "https://docs.piral.io/schemas/piral-v0.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Schema for Piral Instances",
  "description": "Defines the schema for the piral.json associated with Piral instances.",
  "type": "object",
  "required": [],
  "properties": {
    "debugTools": {
      "type": "boolean",
      "description": "Always includes the debug tools - not only in the emulator. By default, debug tools are not included.",
      "default": false
    },
    "debugSettings": {
      "type": "object",
      "description": "The initial settings for the debug tools. Can still be overridden by some user settings.",
      "properties": {
        "viewState": {
          "description": "Defines the initial state of the view state debug option.",
          "default": true,
          "type": "boolean"
        },
        "loadPilets": {
          "description": "Defines the initial state of the load pilets debug option.",
          "default": false,
          "type": "boolean"
        },
        "hardRefresh": {
          "description": "Defines the initial state of the hard refresh debug option.",
          "default": false,
          "type": "boolean"
        },
        "viewOrigins": {
          "description": "Defines the initial state of the view origin debug option.",
          "default": false,
          "type": "boolean"
        },
        "extensionCatalogue": {
          "description": "Defines the initial state of the extension catalogue debug option.",
          "default": true,
          "type": "boolean"
        },
        "clearConsole": {
          "description": "Defines the initial state of the clear console debug option.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "target": {
      "type": "object",
      "description": "Defines the target platform of the Piral instance. By default, 'web' is used resolving to a website with debugging via kras.",
      "properties": {
        "platform": {
          "type": "string",
          "description": "The platform where the Piral instance is to be run.",
          "enum": [
            "web",
            "node"
          ]
        },
        "options": {
          "type": "object",
          "description": "Further platform-specific options to use."
        }
      }
    },
    "emulator": {
      "type": "string",
      "enum": [
        "package",
        "website",
        "sources",
        "none"
      ],
      "description": "Defines what the type of the emulator artifact used by the build command is. 'none' skips implicit building of the emulator."
    },
    "isolation": {
      "type": "string",
      "enum": [
        "classic",
        "modern"
      ],
      "description": "Defines what isolation / component wrapper is used for components of micro frontends. By default, the 'classic' isolation mode is used."
    },
    "internalStyles": {
      "type": "string",
      "enum": [
        "inline",
        "sheet",
        "none"
      ],
      "description": "Defines how the styles for the web components are transported. 'inline' puts them on the web components when rendering, 'sheet' includes a stylesheet when bundling, 'none' requires you to include them somewhere. By default, 'inline' is used."
    },
    "remoteTypes": {
      "type": "string",
      "description": "The address of the generated d.ts combining extra type information from all pilets."
    },
    "shared": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Path to the file to consider for sharing from the app shell."
      },
      "description": "Defines what files to share directly as exports from the app shell."
    },
    "pilets": {
      "type": "object",
      "description": "Determines the scaffolding and upgrading behavior of pilets using this Piral instance.",
      "required": [],
      "properties": {
        "files": {
          "type": "array",
          "description": "The files to copy into scaffolded pilets.",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "description": "Defines the path of the file to get, which matches the path in the scaffolded pilet."
              },
              {
                "type": "object",
                "description": "Defines the specifics of the file to match and write out.",
                "required": [
                  "from",
                  "to"
                ],
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "Sets the source path (from the current directory) of the file to get."
                  },
                  "to": {
                    "type": "string",
                    "description": "Sets the target path of the file (from the directory of the scaffolded pilet)."
                  },
                  "deep": {
                    "type": "boolean",
                    "description": "Defines if the provided path is a directory that should be copied deeply with all nested content."
                  },
                  "once": {
                    "type": "boolean",
                    "description": "Defines if the copying of files only applies to scaffolded pilets, i.e., will be ignored when doing an upgrade."
                  }
                }
              }
            ]
          }
        },
        "scripts": {
          "type": "object",
          "required": [],
          "description": "Defines additional scripts to be placed in the package.json of scaffolded pilets."
        },
        "template": {
          "type": "string",
          "description": "The default template package to be used for scaffolding. By default, the 'default' template package is used."
        },
        "validators": {
          "type": "object",
          "required": [],
          "description": "A map of validators to be used in a scaffolded pilet. Each key represents the name of the validator. Each value represents the options for the respective validator."
        },
        "devDependencies": {
          "type": "object",
          "required": [],
          "description": "Defines additional entries for the devDependencies section of the package.json."
        },
        "preScaffold": {
          "type": "string",
          "description": "The script to run before doing the main scaffolding part."
        },
        "postScaffold": {
          "type": "string",
          "description": "The script to run after doing the main scaffolding part."
        },
        "preUpgrade": {
          "type": "string",
          "description": "The script to run before doing the main upgrade part."
        },
        "postUpgrade": {
          "type": "string",
          "description": "The script to run after doing the main upgrade part."
        },
        "packageOverrides": {
          "type": "object",
          "required": [],
          "description": "Defines arbitrary overrides for the package.json of scaffolded pilets."
        }
      }
    }
  }
}
